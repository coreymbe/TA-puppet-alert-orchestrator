{"alert_action_builder": {"modular_alerts": [{"description": "Generates a puppet:detailed event from a puppet:summary event", "largeIcon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAAFhUlEQVR4Xu2baUhcVxTH/2+cmURTnamxqVOFUMctLqGgxqqtIm7F9oNUTFpssHSDiEOpGFrQDwG10FLBFkstLhjaICiBYpGi2FaE+qFudYEuxkpCrPuWOGbcMuWO0Tp9y7xFW33e+1HPve+en/9z3jn3XRn7TZMdCsY7XyyjpmNVwQqHeypDAQn/gSggFwKmgCggZTmOU0G9YxsYur3htLKGYfB6sjvraccySX/w1X189M2KEwydG7DeZKKACAEK6B8dcIYYBUQBic7cVEFyXvN357cwtfTQaSrDAFEBOpqkRWvvkeGxfM1LgbS6ZsfLHy+i7Zc1KdOOjK3iVmPH0wvvz6HnlnNxeWQoCGx03wABDM6/N4vhO+qCxPxR9YSk86ATWgZPebtB68aFnUGoZQa//7WpBvE4fGAASAJk9tWi5ooB8aE6EFjswSDq6iz6/1SHkiQDIkAiz+pQ9qonEsP0MJ5iQ1qyPsRLHy7ip9/Wj7ySZAEiXgebtLjyggdeSXCH7+MaFojbs1sovnFfEqBfJzYPnfJkAyKe+xo1uJzkjndfPAW/05xJSRKgT1qsuHr9nqQ5B22sCBDZ3GMnGbyW5I5rFz3xpJGtJCkOqBIQAXBCx+BSwkl89qYBBg+uxC0Ok2oBEfc1GuDOl2fg5y0/1FQNiEC6W0MBCcYKBeQilVBAFJC4tw2fFVUQVRBV0L8JKK6k9y5IQ0xAYNGBOnxX7A0fL/nthmoLxYRQPa5bjDD7yq+iCXtVAnr+nB5Vbxtw/qxWWQJTI6DnzulRkeeFC0Hs72VyaB2EgsLDw5GUlARPT0/WlmZnZ1FfXy+4VdlJ+tlgnQNOfKie9YAVmx1lzc63Q8QA+/nWOn4cEXcKmZGRgeTkZM5lJyYm0NHRgby8PERERCAxMZET0NzcHOrq6tDf34+mpibOtWQBeuZpHare8gLJPVzj8qdL+LrrgRgmsm3KyspQXFzMOZ843tfXBwJRzBgdHUVnZ6cDEgG7d0gGFGTSosFiQHwIN5yLFYto7raJ2ZciGyFAchceHBxEfn4+uru7d5dgvr92WtJXDS8PBtFm7pxz6REcSQvK9OYgAJGtjIyMIDc3F0NDQ46d7duHw9zKJTR3P8DGlkyPJU47KEBkGySpd3V17R+gNz5fwo0uG9Y3/wvtbJM8SEDT09OIi4vD+Pi4cgVZau+hus2KTefbMhL1IN1cDKCGhgZYLBbW4gsLC9DphEuT4OBgkOStOMT+r+svQoDsdjtaWlqQlZXFS97HxweTk5PQavkLXFI7cQIidYzV5hwu5ALVGQO7zzqMgHp7exETEyMoS4ZhEBUVhZ6eHl47XkBH4RKnkILEACJUwsLCMDAwAL2eu2SJjo7mVtBxAeTn5+doNdLT0zlVREL1yF7i3A8FESppaWlob2/nDTMKSA6gb3vX8MOw851DjYZBRR67Iz6qSXpHMrIUJKUqoYBc0KKAVAzI398fpNpOSUnh9JJU3KqspMXWQeQwbXh4mFcCmZmZ6gRktVpRXV2NoqIiXueNRqOjY4+MjBSupINMWkUt+MzyFpZXFS0h5Z2wa+uqWSWQKisrUVJSwrn+2NgYAgICBJ/taDWkXgOW5c0BTHIFiDzSZrNhZWUFMzMzaGtrQ2pqKkym7f+aJM2q0IiNjXX0aaoGtBeAo20gHbeIQWxDQkK2jzvUrCARLFgmJDRJb7ZzLk0B7UE0Pz/v+FTU2tq6+1NVAiIqIIdhgYGBokU0NTWFwsJCNDY2Os1RJSBSBxUUFKC0tNTxpjKbzbygiGp2PhzW1tay7FQLaOdEMTs7Gzk5ObyASKFYXl7O+3vVAxIdYzyGFJALghQQBaQsyKiCqIKoglgExJ4HiUFHQ4yGmBid8Nv8DQU6b+fFZyyIAAAAAElFTkSuQmCC", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAACS0lEQVRYR2P8v1byPwMewBj8HJ801eUYRx1EIExRQggWPROT+RjyvLjBWgc0ygadg1wb34FDJduDiyHAnGPgQwhb9Eb0fWBYefQ71XMTLgMJ5jKQxugJHxiWHaaPoxiDzDmwlkO53twMDtpscI8EdL5n2HjqB81DipGBgQFnwTg3S4AhyZkT7gjLyjcMJ279pqmj8DoIZLO/KTvDhgohgo6gVvFA0EEgl8Q6cDIsyhXA6yi6OijShpNhWeGog3DHyGgIEcpCd6eJMSiJMw+ORP1hsQQDPxcoM+IHdMllX5dJMHCxQxzz7ed/Bu6oF4TchSL//z9qmXvnzh0GFRUVDDOEhYUZ3r2DVOyMpiqsWEvq2Zn8DPoKrGBF7778YxCOf0mSY0CK0R2EzwBtbW2Ga9euMRCsXD99/8/AH0NayMAsJsVB9+7dY1BWVibsIErSBrqDpk+fzpCVlQV2r4WFBcPMmTMZ9PT04AHn7e2N6qDEKR/AktF2nAwueuyQOKWg14HuIEZG1MzBzMzM8OfPH7iDQA6kaZuakINALrl16xaDqqoq3FED7qCLFy+iRBvBRE3LKAMFy6BzEHK0PnnyhIFxbZkg3q50cNd7kssfXNk+NzeXYcqUKXDz9u3bx+Do6IiaqPE1Ycl2CVQjtnIIJHb69GkGMzMzDONBuZCoFiO5DiOlYAwKCmJYv349fR30+PFjBllZWQz/ubi4MOzduxdS7tEzykBRoqCggOKgZ8+eMfz69QtRDtHbQYSin+4hNOog5BAgpi5DDzEADvEYHk3zgtIAAAAASUVORK5CYII=", "label": "Generate detailed Puppet report", "short_name": "puppet_generate_detailed_report", "parameters": [{"format_type": "text", "required": false, "name": "puppet_enterprise_console", "label": "Puppet Enterprise Console", "default_value": "", "help_string": "Override which PE Console to use", "type": "", "value": "https://puppet-pdx.c.splunk-217321.internal"}, {"format_type": "text", "required": false, "name": "puppet_default_user", "label": "User", "default_value": "", "help_string": "Override which User account to use", "type": "", "value": "splunk-pdx"}, {"format_type": "text", "required": false, "name": "splunk_hec_url", "label": "Splunk HEC URL", "default_value": "", "help_string": "Override which Splunk HEC URL to use", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "splunk_hec_token", "label": "Splunk HEC Token", "default_value": "", "help_string": "Override which Splunk HEC Token to use", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "puppet_action_hec_token", "label": "Action HEC Token", "default_value": "", "help_string": "Override which Action HEC token to use", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "puppet_db_url", "label": "PuppetDB URL", "default_value": "", "help_string": "Override which PuppetDB URL to use", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "timeout", "label": "Timeout", "default_value": "", "help_string": "Override timeout settings for this alert", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "pe_console", "label": "PE Installation", "default_value": "", "help_string": "Override default PE Installation (pe_console value used in splunk_hec module)", "type": "", "value": ""}], "code": "\n# encoding = utf-8\nimport json\nfrom puppet_report_generation import run_report_generation\n\n# given a setting, check to see if the alert is configured with default override\ndef override(setting_name, helper):\n    alert_setting = helper.get_param(setting_name)\n    global_setting = helper.get_global_setting(setting_name)\n\n    if alert_setting is not None and alert_setting is not '':\n        final_value = alert_setting\n        helper.log_debug(\"Alert value present for '{}' it is '{}'\".format(setting_name, final_value))\n    elif global_setting is not None and global_setting is not '':\n        final_value = global_setting\n        helper.log_debug(\"Alert value NOT present for '{}', using Global value '{}'\".format(setting_name,final_value))\n    else:\n        helper.log_debug(\"There is no value, None returned\")\n        final_value = None\n    \n    return final_value\n\n# function to make sure we only set values we know aren't None\ndef notnone(default_value, possible_none, helper):\n    if possible_none is not None and possible_none is not '':\n        helper.log_debug(\"notnone: True\")\n        return possible_none\n    else:\n        helper.log_debug(\"notnone: False\")\n        return default_value\n\n\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example gets the setup parameters and prints them to the log\n    puppet_enterprise_console = helper.get_global_setting(\"puppet_enterprise_console\")\n    helper.log_info(\"puppet_enterprise_console={}\".format(puppet_enterprise_console))\n    puppet_default_user = helper.get_global_setting(\"puppet_default_user\")\n    helper.log_info(\"puppet_default_user={}\".format(puppet_default_user))\n    splunk_hec_url = helper.get_global_setting(\"splunk_hec_url\")\n    helper.log_info(\"splunk_hec_url={}\".format(splunk_hec_url))\n    splunk_hec_token = helper.get_global_setting(\"splunk_hec_token\")\n    helper.log_info(\"splunk_hec_token={}\".format(splunk_hec_token))\n    bolt_user = helper.get_global_setting(\"bolt_user\")\n    helper.log_info(\"bolt_user={}\".format(bolt_user))\n    puppet_action_hec_token = helper.get_global_setting(\"puppet_action_hec_token\")\n    helper.log_info(\"puppet_action_hec_token={}\".format(puppet_action_hec_token))\n    puppet_bolt_server = helper.get_global_setting(\"puppet_bolt_server\")\n    helper.log_info(\"puppet_bolt_server={}\".format(puppet_bolt_server))\n    puppet_db_url = helper.get_global_setting(\"puppet_db_url\")\n    helper.log_info(\"puppet_db_url={}\".format(puppet_db_url))\n    timeout = helper.get_global_setting(\"timeout\")\n    helper.log_info(\"timeout={}\".format(timeout))\n    pe_console = helper.get_global_setting(\"pe_console\")\n    helper.log_info(\"pe_console={}\".format(pe_console))\n\n    # The following example gets the alert action parameters and prints them to the log\n    puppet_enterprise_console = helper.get_param(\"puppet_enterprise_console\")\n    helper.log_info(\"puppet_enterprise_console={}\".format(puppet_enterprise_console))\n\n    puppet_default_user = helper.get_param(\"puppet_default_user\")\n    helper.log_info(\"puppet_default_user={}\".format(puppet_default_user))\n\n    splunk_hec_url = helper.get_param(\"splunk_hec_url\")\n    helper.log_info(\"splunk_hec_url={}\".format(splunk_hec_url))\n\n    splunk_hec_token = helper.get_param(\"splunk_hec_token\")\n    helper.log_info(\"splunk_hec_token={}\".format(splunk_hec_token))\n\n    puppet_action_hec_token = helper.get_param(\"puppet_action_hec_token\")\n    helper.log_info(\"puppet_action_hec_token={}\".format(puppet_action_hec_token))\n\n    puppet_db_url = helper.get_param(\"puppet_db_url\")\n    helper.log_info(\"puppet_db_url={}\".format(puppet_db_url))\n\n    timeout = helper.get_param(\"timeout\")\n    helper.log_info(\"timeout={}\".format(timeout))\n\n    pe_console = helper.get_param(\"pe_console\")\n    helper.log_info(\"pe_console={}\".format(pe_console))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n    \n    helper.set_log_level(helper.log_level)\n\n    helper.log_info(\"Alert action puppet_generate_detailed_report started.\")\n    \n    helper.log_info(\"Log_level: {}\".format(helper.log_level))\n    \n    # we use the override function to ensure we always use the alert value over the global if one exists\n    helper.log_info(\"Credential lookup\")\n    user_name = override('puppet_default_user', helper)\n\n    # get_user_credential gives us the user_name, unfortunately we can't search by ID even though inputs can\n    puppet_read_account = helper.get_user_credential(user_name)\n    puppet_read_user = puppet_read_account[\"username\"]\n    puppet_read_user_pass = puppet_read_account[\"password\"]\n\n    helper.log_debug(\"username={}\".format(puppet_read_user))\n    \n    # load the rest of the settings\n    helper.log_info(\"Retrieving settings\")\n    # Get PE Console, this doesn't set pe_console value, that is from the alert itself\n    puppet_enterprise_console = override(\"puppet_enterprise_console\", helper)\n    helper.log_debug(\"puppet_enterprise_console={}\".format(puppet_enterprise_console))\n    \n    # get the URL that we are sending the new event to\n    splunk_hec_url = override(\"splunk_hec_url\", helper)\n    helper.log_debug(\"splunk_hec_url={}\".format(splunk_hec_url))\n    \n    # get the token we are using for the event\n    splunk_hec_token = override(\"splunk_hec_token\", helper)\n    helper.log_debug(\"splunk_hec_token={}\".format(splunk_hec_token))\n\n    # we like to be chatty about it\n    puppet_action_hec_token = override(\"puppet_action_hec_token\", helper)\n    helper.log_debug(\"puppet_action_hec_token={}\".format(puppet_action_hec_token))\n    \n    # if we have standalone pdb server, this is who we talk to\n    puppet_db_url = override(\"puppet_db_url\", helper)\n    helper.log_debug(\"puppet_db_url={}\".format(puppet_db_url))\n\n    # this is the timeout we use, rarely an issue for pdb lookup\n    timeout = override(\"timeout\", helper)\n    helper.log_debug(\"timeout={}\".format(timeout))\n\n    # create our alert object to build the actual report\n    helper.log_info(\"Assembling alert data\")\n    alert = {}\n    alert['global'] = {}\n    alert['param'] = {}\n    \n    alert['global']['puppet_enterprise_console'] = puppet_enterprise_console\n    alert['global']['puppet_read_user'] = puppet_read_user\n    alert['global']['puppet_read_user_pass'] = puppet_read_user_pass\n    alert['global']['splunk_hec_url'] = splunk_hec_url\n    alert['global']['splunk_hec_token'] = splunk_hec_token\n    alert['global']['timeout'] = timeout\n    \n    # we're using the notnone function to ensure we always have a value, even if it's duplicate\n    # we call it with notnone(default_value, possible_none, helper) - default_value is returned if possible_none is None\n    alert['global']['puppet_action_hec_token'] = notnone(splunk_hec_token, puppet_action_hec_token, helper)\n    alert['global']['puppet_db_url'] = notnone(puppet_enterprise_console, puppet_db_url, helper)\n\n\n    helper.log_debug(\"Getting event data\")\n    # we're going to strip out the three things we need from every event\n    # we're also not going to assume we are sent one event\n    events = helper.get_events()\n\n    # these are the reports we need to retrieve\n    transaction_uuids = []\n\n    for event_raw in events:\n        event = json.loads(event_raw[\"_raw\"])\n        helper.log_debug(\"Event Data Raw: {}\".format(event))\n        # copy the needed data to a new dictionary\n        temp_dict = {\n            'pe_console': event['pe_console'],\n            'transaction_uuid': event['transaction_uuid'],\n            'host': event['certname'],\n        }\n        transaction_uuids.append(temp_dict.copy())\n\n    helper.log_debug(\"Events: {}\".format(transaction_uuids))\n    run_report_generation(alert, transaction_uuids, helper)\n\n    helper.log_info(\"Alert action puppet_generate_detailed_report completed.\")\n\n    return 0\n", "uuid": "851f0d3fc36f4c27b1e6dcd3f4a2f31a"}, {"description": "Run a Bolt Task on the events host with Puppet Enterprise", "largeIcon": "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", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAACZUlEQVRYR+2WvYsTQRjGnzl2dS9HEm65eBErCVdZH9wljWiRzuZE00RQhCBYiCiIhGiRwsbK/AVHBEEtxC6FZWIvCBYBweJwb+8CC/nc9VZm1+zm9jtxk70iUyXM7Mxvnud933mJ+vGiCo9B9g68pkOfI2cWiMo0lHWxzjEEK0S/fGQKHUonuHD3twbRerWBnS12CaQ5Mo6h3lDF689dTZV719Zwidc9i8wyt3S5/vIYX74NQ88mtw19s4x+uPv8CF9/jBYCRX1xrEMfnvLY2zlvQFx5JOL7L3nuUK5A9OT3T3jc3DWhLj84xE9BmSuUJxA9+d1jHrdzJpSr9yFVdF8gCmC1zwkqrGwMBHRjm8OnZ+ueVi2Blgp5BYj0No049+/5d1m4sBg63t/E+tqKb+2ZBogQApZlMRrZq79nlh3tb4KfgJnmUHoDeiA9eDyq1SrK5fKpy8myjEQigcFgoD/mb+4nHZ+OO1dXkVg1bZoWxgnIS2ae59HpdMz2w2vxLDDTAmnqEOIPxN46gPLHN4QcF1gtq9frKBaL2lqGYUDtmhyFQsEEEqUTbD0UtPnGiw1sZxjd0/94o6xAVAHrUFUzYvr9vgk0j546CBCF4DjO4DQatKiABEFAKpWyA82jrQiikCRJiMfjZwdoMobob9+eOsygzmazaLVahhrdbhexWMz4X6lUEKgfmi3p7ZWa7qMoCkRRRDqdtm2r1SG3Jn9WiMnvrDHktWc+n0ej0VgsULvdRiaTsXHlcjk0m0297i1SoXFhLJVKSCaTqNVq6PV6pwAjAfJ8N6NQaAk0ViBIpbaq9RcI/CtfVnW5BwAAAABJRU5ErkJggg==", "label": "Run a Bolt Task", "short_name": "puppet_run_task", "parameters": [{"format_type": "text", "required": true, "name": "bolt_target", "label": "Host", "default_value": "$result.host$", "help_string": "", "type": "", "value": "$result.host$"}, {"format_type": "text", "required": true, "name": "task_name", "label": "Task", "default_value": "", "help_string": "Name of task to be run, such as: service::linux", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "task_parameters", "label": "Task Parameters", "default_value": "", "help_string": "Provide parameters as unescaped json: {\"name\" : \"puppet\", \"action\": \"status\"}", "type": "", "value": ""}, {"format_type": "text", "required": true, "name": "puppet_environment", "label": "Puppet Environment", "default_value": "production", "help_string": "Puppet environment that task is located in", "type": "", "value": "production"}, {"format_type": "text", "required": false, "name": "puppet_enterprise_console", "label": "Puppet Enterprise Console", "default_value": "", "help_string": "Override default PE Console", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "bolt_user", "label": "Bolt User", "default_value": "", "help_string": "Override default Bolt User", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "pe_console", "label": "PE Installation", "default_value": "", "help_string": "Override default PE Installation (pe_console value used in splunk_hec module)", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "puppet_bolt_server", "label": "Orch. Services URL", "default_value": "", "help_string": "Override default PE Orch URL", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "puppet_db_url", "label": "PuppetDB URL", "default_value": "", "help_string": "Override default PuppetDB URL", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "timeout", "label": "Timeout", "default_value": "", "help_string": "Override default Timeout", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "splunk_hec_url", "label": "Splunk HEC URL", "default_value": "", "help_string": "Override default Splunk HEC URL", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "puppet_action_hec_token", "label": "Action HEC Token", "default_value": "", "help_string": "Override default Action HEC Token", "type": "", "value": ""}], "code": "\n# encoding = utf-8\n\nimport json\nfrom puppet_bolt_action import run_bolt_task\n\n# given a setting, check to see if the alert is configured with default override\ndef override(setting_name, helper):\n    alert_setting = helper.get_param(setting_name)\n    global_setting = helper.get_global_setting(setting_name)\n\n    if alert_setting is not None and alert_setting is not '':\n        final_value = alert_setting\n        helper.log_debug(\"Alert value present for '{}' it is '{}'\".format(setting_name, final_value))\n    elif global_setting is not None and global_setting is not '':\n        final_value = global_setting\n        helper.log_debug(\"Alert value NOT present for '{}', using Global value '{}'\".format(setting_name,final_value))\n    else:\n        helper.log_debug(\"There is no value, None returned\")\n        final_value = None\n    \n    return final_value\n\n# function to make sure we only set values we know aren't None\ndef notnone(default_value, possible_none, helper):\n    if possible_none is not None and possible_none is not '':\n        helper.log_debug(\"notnone: True\")\n        return possible_none\n    else:\n        helper.log_debug(\"notnone: False\")\n        return default_value\n\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example gets the setup parameters and prints them to the log\n    puppet_enterprise_console = helper.get_global_setting(\"puppet_enterprise_console\")\n    helper.log_info(\"puppet_enterprise_console={}\".format(puppet_enterprise_console))\n    puppet_default_user = helper.get_global_setting(\"puppet_default_user\")\n    helper.log_info(\"puppet_default_user={}\".format(puppet_default_user))\n    splunk_hec_url = helper.get_global_setting(\"splunk_hec_url\")\n    helper.log_info(\"splunk_hec_url={}\".format(splunk_hec_url))\n    splunk_hec_token = helper.get_global_setting(\"splunk_hec_token\")\n    helper.log_info(\"splunk_hec_token={}\".format(splunk_hec_token))\n    bolt_user = helper.get_global_setting(\"bolt_user\")\n    helper.log_info(\"bolt_user={}\".format(bolt_user))\n    puppet_action_hec_token = helper.get_global_setting(\"puppet_action_hec_token\")\n    helper.log_info(\"puppet_action_hec_token={}\".format(puppet_action_hec_token))\n    puppet_bolt_server = helper.get_global_setting(\"puppet_bolt_server\")\n    helper.log_info(\"puppet_bolt_server={}\".format(puppet_bolt_server))\n    puppet_db_url = helper.get_global_setting(\"puppet_db_url\")\n    helper.log_info(\"puppet_db_url={}\".format(puppet_db_url))\n    timeout = helper.get_global_setting(\"timeout\")\n    helper.log_info(\"timeout={}\".format(timeout))\n    pe_console = helper.get_global_setting(\"pe_console\")\n    helper.log_info(\"pe_console={}\".format(pe_console))\n\n    # The following example gets the alert action parameters and prints them to the log\n    bolt_target = helper.get_param(\"bolt_target\")\n    helper.log_info(\"bolt_target={}\".format(bolt_target))\n\n    task_name = helper.get_param(\"task_name\")\n    helper.log_info(\"task_name={}\".format(task_name))\n\n    task_parameters = helper.get_param(\"task_parameters\")\n    helper.log_info(\"task_parameters={}\".format(task_parameters))\n\n    puppet_environment = helper.get_param(\"puppet_environment\")\n    helper.log_info(\"puppet_environment={}\".format(puppet_environment))\n\n    puppet_enterprise_console = helper.get_param(\"puppet_enterprise_console\")\n    helper.log_info(\"puppet_enterprise_console={}\".format(puppet_enterprise_console))\n\n    bolt_user = helper.get_param(\"bolt_user\")\n    helper.log_info(\"bolt_user={}\".format(bolt_user))\n\n    pe_console = helper.get_param(\"pe_console\")\n    helper.log_info(\"pe_console={}\".format(pe_console))\n\n    puppet_bolt_server = helper.get_param(\"puppet_bolt_server\")\n    helper.log_info(\"puppet_bolt_server={}\".format(puppet_bolt_server))\n\n    puppet_db_url = helper.get_param(\"puppet_db_url\")\n    helper.log_info(\"puppet_db_url={}\".format(puppet_db_url))\n\n    timeout = helper.get_param(\"timeout\")\n    helper.log_info(\"timeout={}\".format(timeout))\n\n    splunk_hec_url = helper.get_param(\"splunk_hec_url\")\n    helper.log_info(\"splunk_hec_url={}\".format(splunk_hec_url))\n\n    puppet_action_hec_token = helper.get_param(\"puppet_action_hec_token\")\n    helper.log_info(\"puppet_action_hec_token={}\".format(puppet_action_hec_token))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n    helper.set_log_level(helper.log_level)\n\n    helper.log_info(\"Alert action puppet_run_task started.\")\n\n    helper.log_info(\"Log_level: {}\".format(helper.log_level))\n\n    # users can provide 3 different usernames:\n    # puppet_default_user in the top level config\n    # bolt_user in the top level config\n    # bolt_user in the alert setup itself\n    helper.log_info(\"Credential lookup\")\n    puppet_default_user = helper.get_global_setting(\"puppet_default_user\")\n    bolt_user_name = override('bolt_user', helper)\n\n    # ok at this point we can get the account\n    puppet_bolt_user_name = notnone(puppet_default_user, bolt_user_name, helper)\n\n    puppet_bolt_account = helper.get_user_credential(puppet_bolt_user_name)\n\n    puppet_bolt_user = puppet_bolt_account[\"username\"]\n    puppet_bolt_user_pass = puppet_bolt_account[\"password\"]\n\n    helper.log_debug(\"username={}\".format(puppet_bolt_user))\n\n    # load the rest of the settings\n    helper.log_info(\"Retrieving settings\")\n    # Get PE Console, this doesn't set pe_console value, that is from the alert itself\n    puppet_enterprise_console = override(\"puppet_enterprise_console\", helper)\n    helper.log_debug(\"puppet_enterprise_console={}\".format(puppet_enterprise_console))\n    \n    # get the URL that we are sending the new event to\n    splunk_hec_url = override(\"splunk_hec_url\", helper)\n    helper.log_debug(\"splunk_hec_url={}\".format(splunk_hec_url))\n\n    # get the token we are using for the event\n    splunk_hec_token = override(\"splunk_hec_token\", helper)\n    helper.log_debug(\"splunk_hec_token={}\".format(splunk_hec_token))\n\n    # we like to be chatty about it so we might have a dedicated token\n    puppet_action_hec_token = override(\"puppet_action_hec_token\", helper)\n    helper.log_debug(\"puppet_action_hec_token={}\".format(puppet_action_hec_token))\n\n    # this is the timeout we use, rarely an issue for pdb lookup\n    timeout = override(\"timeout\", helper)\n    helper.log_debug(\"timeout={}\".format(timeout))\n\n    # only need the bolt server\n    puppet_bolt_server = override(\"puppet_bolt_server\", helper)\n    helper.log_debug(\"puppet_bolt_server={}\".format(puppet_bolt_server))\n\n    # we need a pe_console server hostname to indicate which pe install this is for\n    pe_console = override(\"pe_console\", helper)\n    helper.log_debug(\"pe_console={}\".format(pe_console))\n\n    # things that inform our actual bolt task\n\n    bolt_target = helper.get_param(\"bolt_target\")\n    helper.log_debug(\"bolt_target={}\".format(bolt_target))\n\n    task_name = helper.get_param(\"task_name\")\n    helper.log_debug(\"task_name={}\".format(task_name))\n\n    puppet_environment = helper.get_param(\"puppet_environment\")\n    helper.log_debug(\"puppet_environment={}\".format(puppet_environment))\n\n    raw_task_parameters = helper.get_param(\"task_parameters\")\n    helper.log_debug(\"raw_task_parameters={}\".format(raw_task_parameters))\n\n    helper.log_debug(\"Validating if user provided Task Parameters are valid json\")\n    if raw_task_parameters is not None and raw_task_parameters is not '':\n        try:\n            json_task_parameters = json.loads(raw_task_parameters)\n            task_parameters = json.dumps(json_task_parameters)\n            helper.log_debug(\"Task Parameters are valid json\")\n        except:\n            error_string = 'Task {} for host {} uninstigated - Task Parameters must be in a correct JSON format, please check this and try again'.format(task_name,bolt_target)\n            helper.log_error(error_string)\n    else:\n        empty_dict = {}\n        task_parameters = json.dumps(empty_dict)\n        helper.log_debug(\"Task Parameters were empty so forcing valid blank json\")\n    \n    helper.log_debug(\"task_parameters={}\".format(task_parameters))\n\n    # create our alert object to build the actual report\n    helper.log_info(\"Assembling alert data\")\n    alert = {}\n    alert['global'] = {}\n    alert['param'] = {}\n    alert['global']['puppet_enterprise_console'] = puppet_enterprise_console\n    alert['global']['splunk_hec_url'] = splunk_hec_url\n    alert['global']['bolt_user'] = puppet_bolt_user\n    alert['global']['bolt_user_pass'] = puppet_bolt_user_pass\n    alert['global']['puppet_bolt_server'] = notnone(puppet_enterprise_console, puppet_bolt_server, helper)\n    alert['global']['puppet_action_hec_token'] = notnone(splunk_hec_token, puppet_action_hec_token, helper)\n    alert['global']['timeout'] = timeout\n\n    # Load the alert specific settings that are really the task we're running\n    alert['param']['bolt_target'] = bolt_target\n    alert['param']['task_name'] = task_name\n    alert['param']['task_parameters'] = task_parameters\n    alert['param']['puppet_environment'] = puppet_environment\n\n\n    # we don't need to log the event data, but we could do something here to extract if it's a puppet sourcetyep\n    # if so, we extract the transaction_uuid to link it back in the action?\n    # events = helper.get_events()\n\n    helper.log_info(\"Alert action data extracted and passed to run_bolt_task\")\n\n    run_bolt_task(alert, helper)\n\n    helper.log_info(\"Bolt task has completed successfully\")\n\n    # TODO: Implement your alert action logic here\n    return 0\n", "uuid": "bd4950b6ec674a28adfb0346cb4775ee"}]}, "basic_builder": {"appname": "TA-puppet-alert-orchestrator", "friendly_name": "Puppet Alert Orchestrator", "version": "1.0.0", "author": "Puppet, Inc.", "description": "Collection of alert actions specifically for Puppet Enterprise. Previously included in Puppet Report Viewer.", "theme": "#000000", "large_icon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAAFyUlEQVR4Xu2bXUgcVxTH/+N+RNNi7FqV9EUjFKSiEUyRRqsoKulrEmOCQaVikKINLSimtqXSBx80obSVYjUIChaNwTYqaEi1ItramiJVEItIqKSCmsZY1/3I6pYzbdLo3tmZ2VGzjve+LOyeO3Pvb/7nnHvPnRXcN4+6oaGdv7aC9hGbhiv4d1eBA/L+gDggGQFzQByQthjHVNDdORfGZ50eVy7OOowAYevXBzJIV3es4ZP2vz0AOTuOwmTggMAB/S8CpotxQByQ4sjNFeRLmne43LA/9ux5JGhbCgNwILOYYv0BeKdxFV/1WdV02Ve2mlfSdhfw1qd/4Ycpx76auNLBagZENyJ3zKx+gJFpz8Wl0oH4q92OAHoCKfXDB/iFsQL318krGZfQW2VRVQ96xWLA8UgjBM94LSopqXIZv91jRHglo/FDG5qmKkA0h5sVoTidZGZOx+EC4t9bwu9/uvxwuuqH5BMgUk9nuQWnkw4x77juBGIvL+He4v6H5BMgomIIAL5534KcN9iQ1uxu9PyqLrN1/2xH27B/lW99BkSQTAYBrZdfQm4yG5JaQdd+a0VF66rabrtqrwkQjcxsFNDy7s5A0iUggnTI9C+kcye1KUm3gAhSoEnA9BfhiAoL8FnyugZEVCauheN45LaSowpcHJAMLA6IA+Iu5lUDPAbJuAgHxAGpyMkMU64gL/zSYs3o/9iCQ0ZGoUghd92m+dRYM7qvWBDMOPVQyEY00yWgN18z49YVC0IO+66cJxB1B+hkjBndH1hgeUE7nN1SkCAISEhIQFpaGqKiomAwGLC6uorp6WkMDg7i/v37XkXuc7nj9VdN6PsoVBJO4x0bKlXWduyP3Vh3KKsA9/X1ITU1lTm55uZmlJWV4ezZs6iqqkJ8fLwkBIJUW1uL/v5+bG5uetj5BCjhmBHfV78sCad50Ia3v1xRE35U2w4MDCA9PZ3Zr62tDaScCxcuKL5ue3s7SkpKsLKyddzCsXCjskf2361CXhQwUB0qGXNahuwo+Pyh4oH5augNkNvtFgGpbbOzs0hOTsbi4uLTrqrPxdwCIEggbRu2I++z3YdDo/cGSC2YZ+2npqaQlJSE9fV18WvVgKRu3j5ix/lrewNnNwGJyaK2FhUVFTsH6MaPdpyr2zs4agCRuzmdTjEABwQEwGQyiZ9yjQL75OSkdgV1/mRHbt1DbKqKZHLDk/9diYvRBLOzs7G8vPwUUFBQEK5fv46cnByvN2lpaUFBQYE2QG7KFFcfPpe/IsgBamhoQGlpKVwuz8NLCuCnTp1Cb2+vZDCnfhEREWxAPXcd6Bm3exCuLz4iHhg+257XC1TeAE1MTIiBllzLW2tqakJRUZGkCS0T9u0reN4ANTY24tKlS7J+SqvqtbU1BAYGMm3r6+sPNiCiQmk9NjaWCWh4eJgDqqysRE1NDRPQ/Pw8B5SVlYXbt28zAZH7MWPQ1VtW1H235tFp/usIGP3krwg7EYNogikpKSBXYjWbzaYtzdNF/TGLKQ3SNP6LFy+itbWVCYjWT5q3GvsdUGdnJ86cOcMEtCMr6f0O6NGjRwgODmYCIni6VBDVg/Ly8mTXQYmJiRgfH5e0Ky8v1ycg2qBmZmaKJRGpZjQaYbVaYTazX0alfgRQqD4frGmbeWPUhqk/9v61X7m9GGWgwsJCdHR0eDCKjIwEbUdCQkIkAdICknb0PpVcZbW7BwZygGgIVOKYm5vD0NAQZmZmQGCoTBsTEyNb8sjPzxezm64B+fqcSD0nTpyAw+HggLZD3NjYEOGQC1LjCtpGKDc3d0vc0iWgsbExREdHIywsTLGXUZGeVtVdXV1b+ugSEG01aIdOnxkZGV6PgGhJQIeQxcXFzFNW3QJ6UjCjY2da8MXFxcFisYhHz7T+WVpawujoKOrq6rCwsCCpNN0DUuxjEoYckAxBDogD0uZkXEFcQVxBHgTUlFzl8HEX4y4mpxHvv/8DB5mY/BLDqvAAAAAASUVORK5CYII=", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAACZUlEQVRYR+2WvYsTQRjGnzl2dS9HEm65eBErCVdZH9wljWiRzuZE00RQhCBYiCiIhGiRwsbK/AVHBEEtxC6FZWIvCBYBweJwb+8CC/nc9VZm1+zm9jtxk70iUyXM7Mxvnud933mJ+vGiCo9B9g68pkOfI2cWiMo0lHWxzjEEK0S/fGQKHUonuHD3twbRerWBnS12CaQ5Mo6h3lDF689dTZV719Zwidc9i8wyt3S5/vIYX74NQ88mtw19s4x+uPv8CF9/jBYCRX1xrEMfnvLY2zlvQFx5JOL7L3nuUK5A9OT3T3jc3DWhLj84xE9BmSuUJxA9+d1jHrdzJpSr9yFVdF8gCmC1zwkqrGwMBHRjm8OnZ+ueVi2Blgp5BYj0No049+/5d1m4sBg63t/E+tqKb+2ZBogQApZlMRrZq79nlh3tb4KfgJnmUHoDeiA9eDyq1SrK5fKpy8myjEQigcFgoD/mb+4nHZ+OO1dXkVg1bZoWxgnIS2ae59HpdMz2w2vxLDDTAmnqEOIPxN46gPLHN4QcF1gtq9frKBaL2lqGYUDtmhyFQsEEEqUTbD0UtPnGiw1sZxjd0/94o6xAVAHrUFUzYvr9vgk0j546CBCF4DjO4DQatKiABEFAKpWyA82jrQiikCRJiMfjZwdoMobob9+eOsygzmazaLVahhrdbhexWMz4X6lUEKgfmi3p7ZWa7qMoCkRRRDqdtm2r1SG3Jn9WiMnvrDHktWc+n0ej0VgsULvdRiaTsXHlcjk0m0297i1SoXFhLJVKSCaTqNVq6PV6pwAjAfJ8N6NQaAk0ViBIpbaq9RcI/CtfVnW5BwAAAABJRU5ErkJggg==", "visible": true, "tab_version": "3.0.1", "tab_build_no": "2", "build_no": 3}, "data_input_builder": {"datainputs": []}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "INFO"}, "credential_settings": [], "customized_settings": [{"format_type": "text", "required": true, "name": "puppet_enterprise_console", "label": "Puppet Enterprise Console", "default_value": "https://puppet.company.lan", "help_string": "URL to access the Puppet Enterprise console", "internal_name": "", "type": "text", "value": "https://puppet-lhr.c.splunk-217321.internal"}, {"format_type": "text", "required": true, "name": "puppet_default_user", "label": "User", "default_value": "", "help_string": "Account name from Global Accounts to use by default", "internal_name": "", "type": "text", "value": "splunk-lhr"}, {"format_type": "text", "required": true, "name": "splunk_hec_url", "label": "Splunk HEC URL", "default_value": "https://splunk.company.lan:8088/services/collector", "help_string": "", "internal_name": "", "type": "text", "value": "https://splunk.c.splunk-217321.internal:8088/services/collector"}, {"format_type": "text", "required": true, "name": "splunk_hec_token", "label": "Splunk HEC Token", "default_value": "", "help_string": "Token from HEC configured with puppet:summary or puppet:detailed sourcetype", "internal_name": "", "type": "text", "value": "aa2d7aa6-e1a7-42b5-94f6-4d08b458605c"}, {"format_type": "text", "required": false, "name": "bolt_user", "label": "Bolt User", "default_value": "", "help_string": "Account name from Global Accounts to use by default for Bolt Actions", "internal_name": "", "type": "text", "value": ""}, {"format_type": "text", "required": false, "name": "puppet_action_hec_token", "label": "Action HEC Token", "default_value": "", "help_string": "Provide token if using dedicated HEC to track the actions of this add-on", "internal_name": "", "type": "text", "value": ""}, {"format_type": "text", "required": false, "name": "puppet_bolt_server", "label": "Orch. Services URL", "default_value": "", "help_string": "Puppet Enterprise Orchestrator URL (derived from PE Console by default)", "internal_name": "", "type": "text", "value": ""}, {"format_type": "text", "required": false, "name": "puppet_db_url", "label": "PuppetDB URL", "default_value": "", "help_string": "URL to access PuppetDB (derived from PE Console by default)", "internal_name": "", "type": "text", "value": ""}, {"format_type": "text", "required": false, "name": "timeout", "label": "Timeout", "default_value": "", "help_string": "Maximum time any action should take in seconds", "internal_name": "", "type": "text", "value": ""}, {"format_type": "text", "required": false, "name": "pe_console", "label": "PE Installation", "default_value": "", "help_string": "Hostname of PE Installation - puppet.company.lan or pe_console value from splunk_hec module", "internal_name": "", "type": "text", "value": ""}]}}, "sourcetype_builder": {}}